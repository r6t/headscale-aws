Description: Headscale IPv6-centric EC2, VPC
Parameters:
  HostedZoneId:
    Description: Hosted Zone ID to use for the Headscale endpoint.
    Type: String
  PublicKeyParameter:
    Description: SSH public key to be used with EC2 keypair
    Type: String
  SSHSource:
    Description: IPv6 CIDR to allow ssh in from
    Type: String
Resources:
  AAAARecord:
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Name: headscale.r6t.io
      ResourceRecords:
        - !GetAtt 'DNSLambdaInvocation.Ipv6Address'
      TTL: '30'
      Type: AAAA
    Type: AWS::Route53::RecordSet
  DNSLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action:
                  - ec2:DescribeInstances
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LambdaEC2DescribeInstancesPolicy
    Type: AWS::IAM::Role
  DNSLambdaFunction:
    DependsOn:
      - EC2Instance
    Properties:
      Code:
        ZipFile: "import boto3\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    ec2_client = boto3.client('ec2')\n    \n    try:\n        if event['RequestType'] in ['Create', 'Update']:\n\
          \            instance_id = event['ResourceProperties']['InstanceId']\n            response = ec2_client.describe_instances(InstanceIds=[instance_id])\n            \n            ipv6_addresses\
          \ = response['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['Ipv6Addresses']\n            if not ipv6_addresses:\n                raise ValueError(\"No IPv6 address found for the instance.\"\
          )\n            \n            ipv6_address = ipv6_addresses[0]['Ipv6Address']\n            responseData = {'Ipv6Address': ipv6_address}\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ responseData)\n        \n        elif event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, \"CustomResourcePhysicalID\")\n\n    except Exception\
          \ as e:\n        responseData = {'Message': str(e)}\n        cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
      Handler: index.lambda_handler
      Role: !GetAtt 'DNSLambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  DNSLambdaInvocation:
    Properties:
      InstanceId: !Ref 'EC2Instance'
      ServiceToken: !GetAtt 'DNSLambdaFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
  EC2Instance:
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      EbsOptimized: false
      ImageId: ami-08116b9957a259459
      InstanceType: t2.micro
      KeyName: !Ref 'EC2Keypair'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'HeadscaleSecurityGroup'
          SubnetId: !Ref 'HeadscalePublicSubnet'
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: headscale
      Tenancy: default
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - "apt update && apt upgrade -y && apt install neovim\n"
            - "wget --output-document=headscale.deb https://github.com/juanfont/headscale/releases/download/v0.23.0-alpha8/headscale_0.23.0-alpha8_linux_amd64.deb\n"
            - "apt install ./headscale.deb -y\n"
            - "sed -i 's#server_url: http://127\\.0\\.0\\.1:8080#server_url: https://headscale\\.r6t\\.io:443#' /etc/headscale/config.yaml\n"
            - "sed -i 's#listen_addr: 127\\.0\\.0\\.1:8080#listen_addr: 0\\.0\\.0\\.0:443#' /etc/headscale/config.yaml\n"
            - "sed -i '/acme_email:/d' config.yaml && sed -i '/^tls_letsencrypt_hostname:/a\\acme_email: headscale@r6t.io' /etc/headscale/config.yaml\n"
            - "sed -i 's#tls_letsencrypt_challenge_type: HTTP-01#tls_letsencrypt_challenge_type: TLS-ALPN-01#' /etc/headscale/config.yaml\n"
            - "sed -i '/tls_letsencrypt_hostname:/d' config.yaml && sed -i '/^# Type of ACME challenge/a\\tls_letsencrypt_hostname: headscale.r6t.io' /etc/headscale/config.yaml\n"
            - "sed -i 's#nameservers:\\n - 1\\.1\\.1\\.1#nameservers:\\n - 2001:1608:10:25::1c04:b12f#' /etc/headscale/config.yaml\n"
    Type: AWS::EC2::Instance
  EC2Keypair:
    Properties:
      KeyName: HeadscaleSSHPublicKey
      PublicKeyMaterial: !Ref 'PublicKeyParameter'
    Type: AWS::EC2::KeyPair
  HeadscaleInternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: headscale
    Type: AWS::EC2::InternetGateway
  HeadscalePublicSubnet:
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      Ipv6CidrBlock: !GetAtt 'TriggerLambdaCustomResource.Ipv6CidrBlock'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: headscale-public
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::Subnet
  HeadscaleRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: headscale
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::RouteTable
  HeadscaleSecurityGroup:
    Properties:
      GroupDescription: Headscale EC2 Security Group
      SecurityGroupIngress:
        - CidrIpv6: !Ref 'SSHSource'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: headscale
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::SecurityGroup
  HeadscaleSubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'HeadscaleRouteTable'
      SubnetId: !Ref 'HeadscalePublicSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  HeadscaleVpc:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: headscale
    Type: AWS::EC2::VPC
  HeadscaleVpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'HeadscaleInternetGateway'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCGatewayAttachment
  Headscaleipv6CidrBlock:
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCCidrBlock
  IPv6LambdaFunction:
    Properties:
      Code:
        ZipFile: "import json\nimport boto3\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    ec2_client = boto3.client('ec2')\n    ssm_client = boto3.client('ssm')\n    \n    try:\n     \
          \   if event['RequestType'] in ['Create', 'Update']:\n            vpcs_response = ec2_client.describe_vpcs(Filters=[{\"Name\": \"tag:Name\", \"Values\": [\"headscale\"]}])\n\n            if not\
          \ vpcs_response[\"Vpcs\"]:\n                raise ValueError(\"No VPC found with the name headscale\")\n\n            vpc_id = vpcs_response[\"Vpcs\"][0][\"VpcId\"]\n            ipv6_cidr_block\
          \ = vpcs_response[\"Vpcs\"][0][\"Ipv6CidrBlockAssociationSet\"][0][\"Ipv6CidrBlock\"]\n            ssm_client.put_parameter(\n                    Name=\"headscaleIPv6CidrBlock\",\n           \
          \         Value=ipv6_cidr_block,\n                    Type=\"String\",\n                    Overwrite=True\n                )\n            \n            responseData = {'Ipv6CidrBlock': ipv6_cidr_block}\n\
          \            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)\n        \n        elif event['RequestType'] == 'Delete':\n            ssm_client.delete_parameter(Name=\"headscaleIPv6CidrBlock\"\
          )\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, \"CustomResourcePhysicalID\")\n\n    except Exception as e:\n        responseData = {'Message': str(e)}\n        cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  Ipv6CidrBlockSSMParameter:
    Properties:
      Name: headscaleIPv6CidrBlock
      Type: String
      Value: The SSM parameter containing the Headscale VPC IPv6 CIDR block has not been set.
    Type: AWS::SSM::Parameter
  Ipv6Route:
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'HeadscaleInternetGateway'
      RouteTableId: !Ref 'HeadscaleRouteTable'
    Type: AWS::EC2::Route
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeIpv6Pools
                  - ec2:DescribeVpcs
                  - ssm:DeleteParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: root
    Type: AWS::IAM::Role
  Route:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'HeadscaleInternetGateway'
      RouteTableId: !Ref 'HeadscaleRouteTable'
    Type: AWS::EC2::Route
  TriggerLambdaCustomResource:
    DependsOn:
      - Ipv6CidrBlockSSMParameter
    Properties:
      ServiceToken: !GetAtt 'IPv6LambdaFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
