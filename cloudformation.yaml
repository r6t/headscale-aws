Description: Headscale IPv6-centric EC2 stack
Outputs:
  HeadscaleApplicationURL:
    Description: Headscale application URL
    Value: !Join
      - ''
      - - https://
        - !Ref 'StackName'
        - .
        - !GetAtt 'TriggerSSMLambdaCustomResource.DomainName'
Parameters:
  HeadscaleRelease:
    Default: '0.23.0-alpha9'
    Description: 'Headscale release version to use: https://github.com/juanfont/headscale/releases'
    Type: String
  HostedZoneId:
    Description: Hosted Zone ID for the Headscale endpoint record.
    Type: String
  MagicDnsName:
    Default: magic.internal
    Description: MagicDNS/Headscale internal network domain name
    Type: String
  NextDnsId:
    Description: NextDNS account to be used with Headscale
    Type: String
  StackName:
    Default: headscale
    Description: Base name for resources. Meant to be headscale, changing can be useful for multiple stacks
    Type: String
Resources:
  AAAARecord:
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Name: !Join
        - ''
        - - !Ref 'StackName'
          - .
          - !GetAtt 'TriggerSSMLambdaCustomResource.DomainName'
      ResourceRecords:
        - !GetAtt 'DNSLambdaInvocation.Ipv6Address'
      TTL: '60'
      Type: AAAA
    Type: AWS::Route53::RecordSet
  ApplicationSG:
    Properties:
      GroupDescription: Headscale EC2 Security Group
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::SecurityGroup
  DNSLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              - Action:
                  - ec2:DescribeInstances
                  - route53:ListHostedZones
                  - route53:GetHostedZone
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LambdaEC2DescribeInstancesPolicy
    Type: AWS::IAM::Role
  DNSLambdaFunction:
    DependsOn:
      - EC2Instance
    Properties:
      Code:
        ZipFile: "import boto3\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    ec2_client = boto3.client('ec2')\n    \n    try:\n        if event['RequestType'] in ['Create', 'Update']:\n\
          \            instance_id = event['ResourceProperties']['InstanceId']\n            response = ec2_client.describe_instances(InstanceIds=[instance_id])\n            \n            ipv6_addresses\
          \ = response['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['Ipv6Addresses']\n            if not ipv6_addresses:\n                raise ValueError(\"No IPv6 address found for the instance.\"\
          )\n            \n            ipv6_address = ipv6_addresses[0]['Ipv6Address']\n            responseData = {'Ipv6Address': ipv6_address}\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ responseData)\n        \n        elif event['RequestType'] == 'Delete':\n            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, \"CustomResourcePhysicalID\")\n\n    except Exception\
          \ as e:\n        responseData = {'Message': str(e)}\n        cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
      Handler: index.lambda_handler
      Role: !GetAtt 'DNSLambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  DNSLambdaInvocation:
    Properties:
      InstanceId: !Ref 'EC2Instance'
      ServiceToken: !GetAtt 'DNSLambdaFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
  EC2Instance:
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      EbsOptimized: false
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: ami-08116b9957a259459
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'ApplicationSG'
          SubnetId: !Ref 'HeadscalePublicSubnet'
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
      Tenancy: default
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#cloud-config\n\n"
            - "package_update: true\n"
            - "package_upgrade: true\n\n"
            - "packages:\n"
            - "  - neovim\n"
            - "  - net-tools\n"
            - "  - yq\n\n"
            - "write_files:\n"
            - "  - path: /home/ubuntu/headscale/config.yaml\n"
            - "    owner: root:root\n"
            - "    permissions: '0644'\n"
            - "    content: |\n"
            - "      ---\n"
            - '      server_url: https://'
            - !Ref 'StackName'
            - .
            - !GetAtt 'TriggerSSMLambdaCustomResource.DomainName'
            - ":443\n"
            - "      listen_addr: 0.0.0.0:443\n"
            - "      metrics_listen_addr: 127.0.0.1:9090\n"
            - "      grpc_listen_addr: 127.0.0.1:50443\n"
            - "      grpc_allow_insecure: false\n"
            - "      noise:\n"
            - "        private_key_path: /var/lib/headscale/noise_private.key\n"
            - "      prefixes:\n"
            - "        v6: fd7a:115c:a1e0::/48\n"
            - "        v4: 100.64.0.0/10\n"
            - "        allocation: sequential\n"
            - "      derp:\n"
            - "        server:\n"
            - "          enabled: false\n"
            - "          region_id: 999\n"
            - "          region_code: \"headscale\"\n"
            - "          region_name: \"Headscale Embedded DERP\"\n"
            - "          stun_listen_addr: \"0.0.0.0:3478\"\n"
            - "          private_key_path: /var/lib/headscale/derp_server_private.key\n"
            - "          automatically_add_embedded_derp_region: true\n"
            - "          ipv4: 1.2.3.4\n"
            - "          ipv6: 2001:db8::1\n"
            - "        urls:\n"
            - "          - https://controlplane.tailscale.com/derpmap/default\n"
            - "        paths: []\n"
            - "        auto_update_enabled: true\n"
            - "        update_frequency: 24h\n"
            - "      disable_check_updates: false\n"
            - "      ephemeral_node_inactivity_timeout: 30m\n"
            - "      database:\n"
            - "        type: sqlite\n"
            - "        sqlite:\n"
            - "          path: /var/lib/headscale/db.sqlite\n"
            - "      acme_url: https://acme-v02.api.letsencrypt.org/directory\n"
            - '      acme_email: ''headscale@'
            - !GetAtt 'TriggerSSMLambdaCustomResource.DomainName'
            - "'\n"
            - '      tls_letsencrypt_hostname: '''
            - !Ref 'StackName'
            - .
            - !GetAtt 'TriggerSSMLambdaCustomResource.DomainName'
            - "'\n"
            - "      tls_letsencrypt_cache_dir: /var/lib/headscale/cache\n"
            - "      tls_letsencrypt_challenge_type: TLS-ALPN-01\n"
            - "      tls_cert_path: ''\n"
            - "      tls_key_path: ''\n"
            - "      log:\n"
            - "        format: text\n"
            - "        level: info\n"
            - "      acl_policy_path: ''\n"
            - "      dns_config:\n"
            - "        override_local_dns: true\n"
            - "        nameservers:\n"
            - '          - https://nextdns.io/'
            - !Ref 'NextDnsId'
            - "\n"
            - "        domains: []\n"
            - "        magic_dns: true\n"
            - '        base_domain: '
            - !Ref 'MagicDnsName'
            - "\n"
            - "      unix_socket: /var/run/headscale/headscale.sock\n"
            - "      unix_socket_permission: '0770'\n"
            - "      logtail:\n"
            - "        enabled: false\n"
            - "      randomize_client_port: false\n"
            - "runcmd:\n"
            - '  - wget --output-document=headscale.deb https://github.com/juanfont/headscale/releases/download/v'
            - !Ref 'HeadscaleRelease'
            - /headscale_
            - !Ref 'HeadscaleRelease'
            - "_linux_amd64.deb\n"
            - "  - apt install ./headscale.deb -y\n"
            - "  - rm -f /etc/headscale/config.yaml\n"
            - "  - cp /home/ubuntu/headscale/config.yaml /etc/headscale/config.yaml\n"
            - "  - systemctl enable headscale\n"
            - "  - reboot\n"
    Type: AWS::EC2::Instance
  HeadscaleInternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
    Type: AWS::EC2::InternetGateway
  HeadscalePublicSubnet:
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      Ipv6CidrBlock: !GetAtt 'TriggerSSMLambdaCustomResource.Ipv6CidrBlock'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::Subnet
  HeadscaleRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::RouteTable
  HeadscaleSubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'HeadscaleRouteTable'
      SubnetId: !Ref 'HeadscalePublicSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  HeadscaleVpc:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'StackName'
    Type: AWS::EC2::VPC
  HeadscaleVpcGatewayAttachment:
    DependsOn:
      - Headscaleipv6CidrBlock
    Properties:
      InternetGatewayId: !Ref 'HeadscaleInternetGateway'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCGatewayAttachment
  Headscaleipv6CidrBlock:
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCCidrBlock
  InstanceProfile:
    Properties:
      Roles:
        - !Ref 'SSMRoleForEC2'
    Type: AWS::IAM::InstanceProfile
  Ipv6CidrBlockSSM:
    Properties:
      Name: headscaleIPv6CidrBlock
      Type: String
      Value: The SSM parameter containing the Headscale VPC IPv6 CIDR block has not been set.
    Type: AWS::SSM::Parameter
  Ipv6Route:
    DependsOn:
      - Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'HeadscaleInternetGateway'
      RouteTableId: !Ref 'HeadscaleRouteTable'
    Type: AWS::EC2::Route
  Route:
    DependsOn:
      - HeadscaleVpcGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'HeadscaleInternetGateway'
      RouteTableId: !Ref 'HeadscaleRouteTable'
    Type: AWS::EC2::Route
  SSMLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeIpv6Pools
                  - ec2:DescribeVpcs
                  - ssm:DeleteParameter
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - route53:GetHostedZone
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: root
    Type: AWS::IAM::Role
  SSMLambdaFunction:
    DependsOn:
      - Ipv6Route
    Properties:
      Code:
        ZipFile: "import json\nimport boto3\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    ec2_client = boto3.client('ec2')\n    ssm_client = boto3.client('ssm')\n    r53_client = boto3.client('route53')\n\
          \    stack_name = event['ResourceProperties'].get('StackName', 'headscale')\n    ipv6_cidr_ssm_param_name = f\"/config/{stack_name}/ipv6CidrBlock\"\n    domain_name_ssm_param_name = f\"/config/{stack_name}/domainName\"\
          \n    \n    try:\n        if event['RequestType'] in ['Create', 'Update']:\n            vpcs_response = ec2_client.describe_vpcs(Filters=[{\"Name\": \"tag:Name\", \"Values\": [stack_name]}])\n\
          \            if not vpcs_response[\"Vpcs\"]:\n                raise ValueError(\"No VPC found with the name headscale\")\n\n            vpc_id = vpcs_response[\"Vpcs\"][0][\"VpcId\"]\n       \
          \     ipv6_cidr_block = vpcs_response[\"Vpcs\"][0][\"Ipv6CidrBlockAssociationSet\"][0][\"Ipv6CidrBlock\"]\n            ssm_client.put_parameter(\n                    Name=ipv6_cidr_ssm_param_name,\n\
          \                    Value=ipv6_cidr_block,\n                    Type=\"String\",\n                    Overwrite=True\n                )\n\n            hosted_zone_id = event['ResourceProperties']['HostedZoneId']\n\
          \            hosted_zone = r53_client.get_hosted_zone(Id=hosted_zone_id)\n            domain_name = hosted_zone['HostedZone']['Name'].rstrip('.')\n            ssm_client.put_parameter(\n     \
          \               Name=domain_name_ssm_param_name,\n                    Value=domain_name,\n                    Type=\"String\",\n                    Overwrite=True\n                )\n        \
          \    \n            responseData = {\n                'Ipv6CidrBlock': ipv6_cidr_block,\n                'DomainName': domain_name\n            }\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ responseData)\n        \n        elif event['RequestType'] == 'Delete':\n            try:\n                ssm_client.delete_parameter(Name=ipv6_cidr_block_ssm_param_name)\n            except\
          \ ssm_client.exceptions.ParameterNotFound:\n                print(ipv6_cidr_block_ssm_param_name, \" not found. Skipping delete.\")\n            try:\n                ssm_client.delete_parameter(Name=domain_name_ssm_param_name)\n\
          \            except ssm_client.exceptions.ParameterNotFound:\n                print(\"/config/headscale/domainName not found. Skipping delete.\")\n            cfnresponse.send(event, context,\
          \ cfnresponse.SUCCESS, {}, \"CustomResourcePhysicalID\")\n\n    except Exception as e:\n        responseData = {'Message': str(e)}\n        cfnresponse.send(event, context, cfnresponse.FAILED,\
          \ responseData, \"CustomResourcePhysicalID\")"
      Handler: index.lambda_handler
      Role: !GetAtt 'SSMLambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  SSMRoleForEC2:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
    Type: AWS::IAM::Role
  TriggerSSMLambdaCustomResource:
    DependsOn:
      - Ipv6CidrBlockSSM
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      ServiceToken: !GetAtt 'SSMLambdaFunction.Arn'
      StackName: !Ref 'StackName'
    Type: AWS::CloudFormation::CustomResource
