Parameters:
  HostedZoneId:
    Description: Hosted Zone ID to use for the Headscale endpoint.
    Type: String
  PublicKeyParameter:
    Description: SSH public key to be used with EC2 keypair
    Type: String
  SSHSource:
    Description: IPv4 Address to allow ssh in from. e.g., x.x.x.x/32
    Type: String
Resources:
  EC2Instance:
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      EbsOptimized: false
      ImageId: ami-08116b9957a259459
      InstanceType: t2.micro
      KeyName: !Ref 'EC2Keypair'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'HeadscaleSecurityGroup'
          SubnetId: !Ref 'HeadscalePublicSubnet'
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: headscale
      Tenancy: default
    Type: AWS::EC2::Instance
  EC2Keypair:
    Properties:
      KeyName: HeadscaleSSHPublicKey
      PublicKeyMaterial: !Ref 'PublicKeyParameter'
    Type: AWS::EC2::KeyPair
  HeadscaleInternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: headscale
    Type: AWS::EC2::InternetGateway
  HeadscalePublicSubnet:
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      Ipv6CidrBlock: !GetAtt 'SSMRetrievalLambdaCustomResource.Ipv6CidrBlock'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: headscale-public
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::Subnet
  HeadscaleRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: headscale
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::RouteTable
  HeadscaleSecurityGroup:
    Properties:
      GroupDescription: Headscale EC2 Security Group
      SecurityGroupIngress:
        - CidrIp: !Ref 'SSHSource'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      Tags:
        - Key: Name
          Value: headscale
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::SecurityGroup
  HeadscaleSubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'HeadscaleRouteTable'
      SubnetId: !Ref 'HeadscalePublicSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  HeadscaleVpc:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: headscale
    Type: AWS::EC2::VPC
  HeadscaleVpcGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'HeadscaleInternetGateway'
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCGatewayAttachment
  Headscaleipv6CidrBlock:
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'HeadscaleVpc'
    Type: AWS::EC2::VPCCidrBlock
  IPv6LookupLambdaFunction:
    Properties:
      Code:
        ZipFile: |2

          import json
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              ec2_client = boto3.client('ec2')
              ssm_client = boto3.client('ssm')

              # Initialize responseData
              response_data = {}

              try:
                  # Finding the VPC ID by VPC Name (assuming the name is unique)
                  vpcs_response = ec2_client.describe_vpcs(Filters=[{"Name": "tag:Name", "Values": ["headscale"]}])

                  if not vpcs_response["Vpcs"]:
                      raise ValueError("No VPC found with the name headscale")

                  vpc_id = vpcs_response["Vpcs"][0]["VpcId"]
                  ipv6_cidr_block = vpcs_response["Vpcs"][0]["Ipv6CidrBlockAssociationSet"][0]["Ipv6CidrBlock"]

                  # Store the IPv6 CIDR block in SSM
                  ssm_client.put_parameter(
                      Name="headscaleIPv6CidrBlock",
                      Value=ipv6_cidr_block,
                      Type="String",
                      Overwrite=True
                  )

                  response_data['IPv6CidrBlock'] = ipv6_cidr_block
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId=vpc_id)

              except Exception as e:
                  response_data['Message'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, reason=str(e))
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  Ipv6CidrBlockSSMParameter:
    Properties:
      Name: headscaleIPv6CidrBlock
      Type: String
      Value: The SSM parameter containing the Headscale VPC IPv6 CIDR block has not been set.
    Type: AWS::SSM::Parameter
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeIpv6Pools
                  - ec2:DescribeVpcs
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: root
    Type: AWS::IAM::Role
  Route:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'HeadscaleInternetGateway'
      RouteTableId: !Ref 'HeadscaleRouteTable'
    Type: AWS::EC2::Route
  SSMRetrievalLambdaCustomResource:
    DependsOn:
      - TriggerLambdaCustomResource
    Properties:
      ServiceToken: !GetAtt 'SSMRetrievalLambdaFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
  SSMRetrievalLambdaFunction:
    Properties:
      Code:
        ZipFile: "\nimport json\nimport boto3\nimport cfnresponse\n\ndef lambda_handler(event, context):\n    ssm_client = boto3.client('ssm')\n    try:\n        parameter = ssm_client.get_parameter(Name=\"\
          headscaleIPv6CidrBlock\", WithDecryption=False)\n        ipv6_cidr_block = parameter['Parameter']['Value']\n        \n        responseData = {'Ipv6CidrBlock': ipv6_cidr_block}\n        cfnresponse.send(event,\
          \ context, cfnresponse.SUCCESS, responseData)\n    \n    except Exception as e:\n        responseData = {'Message': str(e)}\n        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)\n"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 10
    Type: AWS::Lambda::Function
  TriggerLambdaCustomResource:
    Properties:
      ServiceToken: !GetAtt 'IPv6LookupLambdaFunction.Arn'
    Type: AWS::CloudFormation::CustomResource
